
                  <h2 className="text-2xl font-bold">Introduction</h2>
                  <p>
                    Power Pages (formerly Power Portal) provides a way to expose Dataverse data on the web, but often developers need more flexibility to build modern, reactive front-ends with frameworks like React. This guide shows you how to create dynamic JSON endpoints using Liquid templates within your Power Portal, which can then be consumed by React components through this Power Portal Proxy.
                  </p>

                  <h2 className="text-2xl font-bold">Prerequisites</h2>
                  <ul className="list-disc pl-6 space-y-1">
                    <li>Access to a Power Pages portal with administrative permissions</li>
                    <li>Basic understanding of Liquid templating</li>
                    <li>Familiarity with JSON structure</li>
                    <li>React frontend development experience</li>
                    <li>This Power Portal Proxy set up and running</li>
                  </ul>
                  
                  <h2 className="text-2xl font-bold">Step 1: Create a Liquid Template Web Page</h2>
                  <div className="space-y-2">
                    <p>
                      Start by creating a new web page in your Power Pages portal that will serve as your JSON endpoint.
                    </p>
                    <ol className="list-decimal pl-6 space-y-1">
                      <li>Go to your Power Pages portal admin area</li>
                      <li>Navigate to Content &gt; Web Pages</li>
                      <li>Click "New" to create a new web page</li>
                      <li>Give it a clear name that indicates it's a JSON endpoint (e.g., "API - Products")</li>
                      <li>Set the partial URL to something descriptive (e.g., "/api/products")</li>
                      <li>Under Web Template, select "Create a new Web Template"</li>
                      <li>Name the template appropriately (e.g., "API Products JSON")</li>
                      <li>For the template source, use Liquid to generate JSON (example provided below)</li>
                    </ol>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Step 2: Set Correct Content Type</h2>
                  <div className="space-y-2">
                    <p>
                      It's crucial to set the correct HTTP content type for your JSON response. Add this at the top of your Liquid template:
                    </p>
                    <div className="bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-auto text-sm">
                      <pre className="font-mono">{`{% assign contentType = "application/json" %}`}</pre>
                    </div>
                    <p>
                      This tells the browser that the content should be interpreted as JSON, not HTML. The proxy will automatically detect and properly handle this content type.
                    </p>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Step 3: Structure Your JSON with Liquid</h2>
                  <div className="space-y-2">
                    <p>Here's an example of a Liquid template that generates a JSON array of products:</p>
                    <div className="bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-auto text-sm">
                      <pre className="font-mono">{`{% assign contentType = "application/json" %}
[
  {% fetchxml products %}
  <fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false">
    <entity name="product">
      <attribute name="productid" />
      <attribute name="name" />
      <attribute name="description" />
      <attribute name="price" />
      <attribute name="createdon" />
      <order attribute="name" descending="false" />
    </entity>
  </fetch>
  {% endfetchxml %}

  {% for product in products.results.entities %}
    {
      "id": "{{ product.productid }}",
      "name": "{{ product.name | escape }}",
      "description": "{{ product.description | escape }}",
      "price": {{ product.price | default: 0 }},
      "createdOn": "{{ product.createdon }}"
    }{% unless forloop.last %},{% endunless %}
  {% endfor %}
]`}</pre>
                    </div>
                    <p>
                      This template retrieves product records from Dataverse using FetchXML and formats them as a JSON array. Note the comma handling between items using the <code>unless forloop.last</code> condition.
                    </p>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Step 4: Add Query Parameters Support (Optional)</h2>
                  <div className="space-y-2">
                    <p>
                      You can make your endpoints more flexible by supporting query parameters:
                    </p>
                    <div className="bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-auto text-sm">
                      <pre className="font-mono">{`{% assign contentType = "application/json" %}
{% assign category = request.params.category %}
{% assign maxItems = request.params.limit | default: 50 %}

[
  {% fetchxml products %}
  <fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false" count="{{ maxItems }}">
    <entity name="product">
      <attribute name="productid" />
      <attribute name="name" />
      <attribute name="price" />
      {% if category != empty %}
      <filter type="and">
        <condition attribute="productcategoryid" operator="eq" value="{{ category }}" />
      </filter>
      {% endif %}
    </entity>
  </fetch>
  {% endfetchxml %}
  
  // Rest of the JSON formatting
]`}</pre>
                    </div>
                    <p>
                      This example accepts optional <code>category</code> and <code>limit</code> parameters that can be used like: <code>/api/products?category=123&limit=10</code>
                    </p>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Step 5: Validate Your JSON</h2>
                  <div className="space-y-2">
                    <p>
                      Common JSON errors when using Liquid templates:
                    </p>
                    <ul className="list-disc pl-6 space-y-1">
                      <li>Missing commas between array items</li>
                      <li>Extra trailing commas (not allowed in JSON)</li>
                      <li>Unescaped special characters in strings</li>
                      <li>Unclosed quotes or brackets</li>
                    </ul>
                    <p>
                      Always validate your JSON output with a tool like <a href="https://jsonlint.com/" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">JSONLint</a> before using it in your application.
                    </p>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Step 6: Set Up Page Permissions</h2>
                  <div className="space-y-2">
                    <p>
                      Configure appropriate page permissions:
                    </p>
                    <ol className="list-decimal pl-6 space-y-1">
                      <li>In the portal admin area, go to Security &gt; Page Permissions</li>
                      <li>Add a new Page Permission for your JSON endpoint</li>
                      <li>Select whether this endpoint requires authentication or should be publicly accessible</li>
                      <li>If restricted, assign appropriate web roles</li>
                    </ol>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Step 7: Configure CORS (If Needed)</h2>
                  <div className="space-y-2">
                    <p>
                      If your React application is hosted on a different domain than your Power Portal, you'll need to handle CORS. The Power Portal Proxy included in this project can help you overcome this limitation by proxying requests to your portal.
                    </p>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Step 8: Sample JSON Templates</h2>
                  <div className="space-y-4">
                    <h3 className="text-xl font-bold">Basic Entity List</h3>
                    <div className="bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-auto text-sm">
                      <pre className="font-mono">{`{% assign contentType = "application/json" %}
{% fetchxml accounts %}
<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false" count="10">
  <entity name="account">
    <attribute name="name" />
    <attribute name="accountid" />
    <attribute name="emailaddress1" />
    <attribute name="telephone1" />
    <order attribute="name" descending="false" />
  </entity>
</fetch>
{% endfetchxml %}
{
  "accounts": [
    {% for account in accounts.results.entities %}
    {
      "id": "{{ account.accountid }}",
      "name": "{{ account.name | escape }}",
      "email": "{{ account.emailaddress1 | default: "" | escape }}",
      "phone": "{{ account.telephone1 | default: "" | escape }}"
    }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ]
}`}</pre>
                    </div>
                    
                    <h3 className="text-xl font-bold">Current User Information</h3>
                    <div className="bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-auto text-sm">
                      <pre className="font-mono">{`{% assign contentType = "application/json" %}
{
  "user": {
    "authenticated": {% if user %} true {% else %} false {% endif %},
    {% if user %}
    "id": "{{ user.id }}",
    "name": "{{ user.fullname | escape }}",
    "email": "{{ user.email | escape }}",
    "roles": [
      {% for role in user.roles %}
      "{{ role.name | escape }}"{% unless forloop.last %},{% endunless %}
      {% endfor %}
    ]
    {% endif %}
  }
}`}</pre>
                    </div>
                    
                    <h3 className="text-xl font-bold">Nested Data with Relationships</h3>
                    <div className="bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-auto text-sm">
                      <pre className="font-mono">{`{% assign contentType = "application/json" %}
{% fetchxml orders %}
<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false">
  <entity name="salesorder">
    <attribute name="salesorderid" />
    <attribute name="ordernumber" />
    <attribute name="totalamount" />
    <attribute name="createdon" />
    <link-entity name="account" from="accountid" to="customerid" link-type="outer">
      <attribute name="accountid" alias="customer_id" />
      <attribute name="name" alias="customer_name" />
    </link-entity>
    <link-entity name="salesorderdetail" from="salesorderid" to="salesorderid">
      <attribute name="salesorderdetailid" alias="line_id" />
      <attribute name="productid" alias="line_product_id" />
      <attribute name="productdescription" alias="line_description" />
      <attribute name="quantity" alias="line_quantity" />
      <attribute name="priceperunit" alias="line_price" />
    </link-entity>
  </entity>
</fetch>
{% endfetchxml %}

{% assign grouped_orders = orders.results.entities | group_by: "salesorderid" %}

[
  {% for order_group in grouped_orders %}
    {% assign first_order = order_group[1] | first %}
    {
      "id": "{{ first_order.salesorderid }}",
      "orderNumber": "{{ first_order.ordernumber }}",
      "total": {{ first_order.totalamount | default: 0 }},
      "createdOn": "{{ first_order.createdon }}",
      "customer": {
        "id": "{{ first_order.customer_id }}",
        "name": "{{ first_order.customer_name | escape }}"
      },
      "items": [
        {% for item in order_group[1] %}
          {
            "id": "{{ item.line_id }}",
            "productId": "{{ item.line_product_id }}",
            "description": "{{ item.line_description | escape }}",
            "quantity": {{ item.line_quantity | default: 0 }},
            "price": {{ item.line_price | default: 0 }}
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ]
    }{% unless forloop.last %},{% endunless %}
  {% endfor %}
]`}</pre>
                    </div>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Step 9: Consuming from React</h2>
                  <div className="space-y-2">
                    <p>
                      To consume your Liquid-generated JSON in a React application:
                    </p>
                    <div className="bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-auto text-sm">
                      <pre className="font-mono">{`import { useState, useEffect } from 'react';

function ProductList() {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    async function fetchProducts() {
      try {
        // The proxy will handle the request to your Power Portal
        const response = await fetch('/api/products');
        const data = await response.json();
        setProducts(data);
      } catch (error) {
        console.error('Error fetching products:', error);
      } finally {
        setLoading(false);
      }
    }
    
    fetchProducts();
  }, []);
  
  if (loading) return <p>Loading...</p>;
  
  return (
    <div>
      <h1>Products</h1>
      <ul>
        {products.map(product => (
          <li key={product.id}>
            <h2>{product.name}</h2>
            <p>{product.description}</p>
            <p>${product.price.toFixed(2)}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}`}</pre>
                    </div>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Advanced Tips and Best Practices</h2>
                  <div className="space-y-2">
                    <h3 className="text-xl font-bold">Error Handling</h3>
                    <p>
                      Include proper error handling in your Liquid templates:
                    </p>
                    <div className="bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-auto text-sm">
                      <pre className="font-mono">{`{% assign contentType = "application/json" %}
{% fetchxml data %}
  // FetchXML query
{% endfetchxml %}

{% if data.error %}
{
  "error": true,
  "message": "{{ data.error.message | escape }}",
  "code": {{ data.error.code | default: 500 }}
}
{% else %}
{
  // Your normal JSON response
}
{% endif %}`}</pre>
                    </div>
                    
                    <h3 className="text-xl font-bold">Pagination</h3>
                    <p>
                      Implement pagination for large datasets:
                    </p>
                    <div className="bg-neutral-100 dark:bg-neutral-800 p-4 rounded-md overflow-auto text-sm">
                      <pre className="font-mono">{`{% assign contentType = "application/json" %}
{% assign pageSize = request.params.pageSize | default: 10 | plus: 0 %}
{% assign pageNumber = request.params.page | default: 1 | plus: 0 %}
{% assign offset = pageSize | times: pageNumber | minus: pageSize %}

{% fetchxml paged_results %}
<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false" count="{{ pageSize }}" page="{{ pageNumber }}">
  // Entity and attributes
</fetch>
{% endfetchxml %}

{
  "items": [
    // Format your items here
  ],
  "pagination": {
    "page": {{ pageNumber }},
    "pageSize": {{ pageSize }},
    "totalRecords": {{ paged_results.results.total-record-count | default: 0 }},
    "totalPages": {{ paged_results.results.total-record-count | divided_by: pageSize | ceil }}
  }
}`}</pre>
                    </div>
                    
                    <h3 className="text-xl font-bold">Security Considerations</h3>
                    <ul className="list-disc pl-6 space-y-1">
                      <li>Always escape user input and output to prevent injection attacks</li>
                      <li>Use the principle of least privilege for your page permissions</li>
                      <li>Don't expose sensitive fields in your JSON output</li>
                      <li>Consider implementing authentication for sensitive endpoints</li>
                      <li>Add rate limiting if necessary through the portal's web API settings</li>
                    </ul>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Troubleshooting Common Issues</h2>
                  <div className="space-y-2">
                    <h3 className="text-xl font-bold">Invalid JSON</h3>
                    <p>
                      If your API is returning invalid JSON, check for:
                    </p>
                    <ul className="list-disc pl-6 space-y-1">
                      <li>Trailing commas after the last item in arrays or objects</li>
                      <li>Missing quotes around property names</li>
                      <li>Unescaped quotes or special characters in string values</li>
                      <li>HTML content being mixed with your JSON output (check content type)</li>
                    </ul>
                    
                    <h3 className="text-xl font-bold">Empty Results</h3>
                    <p>
                      If your endpoint returns empty results, verify:
                    </p>
                    <ul className="list-disc pl-6 space-y-1">
                      <li>FetchXML query is correct and returns data when tested in XrmToolBox</li>
                      <li>User has appropriate permissions to read the requested data</li>
                      <li>Filters aren't accidentally excluding all records</li>
                    </ul>
                    
                    <h3 className="text-xl font-bold">CORS Issues</h3>
                    <p>
                      If facing CORS issues when calling from another domain:
                    </p>
                    <ul className="list-disc pl-6 space-y-1">
                      <li>Use this Power Portal Proxy as a middleware between your app and portal</li>
                      <li>Alternatively, consider hosting your React app directly on the portal</li>
                    </ul>
                  </div>
                  
                  <h2 className="text-2xl font-bold">Useful Resources</h2>
                  <ul className="list-disc pl-6 space-y-2">
                    <li>
                      <a href="https://learn.microsoft.com/en-us/power-pages/configure/liquid/liquid-overview" 
                        target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                        Microsoft Power Pages Liquid Overview
                      </a>
                    </li>
                    <li>
                      <a href="https://learn.microsoft.com/en-us/power-pages/configure/liquid/fetchxml-liquid-tag" 
                        target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                        FetchXML Liquid Tag Reference
                      </a>
                    </li>
                    <li>
                      <a href="https://learn.microsoft.com/en-us/power-pages/configure/liquid/liquid-objects" 
                        target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                        Liquid Objects in Power Pages
                      </a>
                    </li>
                    <li>
                      <a href="https://learn.microsoft.com/en-us/power-apps/developer/data-platform/fetchxml-schema" 
                        target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                        FetchXML Schema Reference
                      </a>
                    </li>
                    <li>
                      <a href="https://github.com/garethcheyne/React-Power-Portal-Proxy" 
                        target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                        React Power Portal Proxy GitHub Repository
                      </a>
                    </li>
                  </ul>
                </div>